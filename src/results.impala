// ====================================================================================================================
// check result
struct BadhronCheckResult {
	passed:  i32,
	failed:  i32,
	pending: i32
}

fn badhron_new_check_result() -> BadhronCheckResult {
	BadhronCheckResult {
		passed:  0,
		failed:  0,
		pending: 0
	}
}


// ====================================================================================================================
// check report
enum BadhronCheckType {
	Bool,
	Int64, Int32, Int16, Int8,
	UInt64, UInt32, UInt16, UInt8,
	Float64, Float32, Float16
}

struct BadhronCheckReport {
	function: &[u8],
	subgroup: &[u8],
	message:  &[u8],
	ctype:    BadhronCheckType,
	expected: &[i8],
	observed: &[i8]
}


// ====================================================================================================================
// suite result
struct BadhronSuiteResult {
	total_result: BadhronCheckResult,
	group_result: BadhronCheckResult,
	split_result: BadhronCheckResult,
	reports:      [&BadhronCheckReport * 50],
	in_split:     bool,
	split_count:  i32,
	report_count: i32,
	exit_status:  i32
}

fn badhron_new_suite_result() -> BadhronSuiteResult {
	BadhronSuiteResult{
		total_result: badhron_new_check_result(),
		group_result: badhron_new_check_result(),
		split_result: badhron_new_check_result(),
		reports:      [0 as &BadhronCheckReport, .. 50],
		in_split:     false,
		split_count:  0,
		report_count: 0,
		exit_status:  0
	}
}


// ====================================================================================================================
// result handler
struct BadhronResultHandler {
	// check results
	passed:       fn() -> (),
	failed:       fn() -> (),
	pending :     fn() -> (),

	// reports
	add_report:   fn(BadhronCheckReport) -> (),

	// splits
	begin_split:  fn() -> (),
	end_split:    fn() -> BadhronCheckResult,
	split_count:  fn() -> i32,

	// group
	group_result: fn() -> BadhronCheckResult,

	// total result
	reset:        fn() -> (),
	total_result: fn() -> BadhronCheckResult,
	exit_status:  fn() -> i32
}

fn badhron_new_result_handler() -> BadhronResultHandler {
	let mut suite = badhron_new_suite_result();
	BadhronResultHandler {
		// check results
		passed:       || {
			if suite.in_split {
				suite.split_result.passed++;
			} else {
				suite.group_result.passed++;
			}
		},

		failed:       || {
			if suite.in_split {
				suite.split_result.failed++;
			} else {
				suite.group_result.failed++;
			}
			suite.exit_status = 1;
		},

		pending:      || {
			if suite.in_split {
				suite.split_result.pending++;
			} else {
				suite.group_result.pending++;
			}
		},

		// reports
		add_report:   |report| {
			if suite.report_count < 50 {
				suite.reports(suite.report_count) = report;
			}
			suite.report_count++;
		},

		// splits
		begin_split:  || {
			suite.in_split = true;
			suite.split_result.passed   = 0;
			suite.split_result.failed   = 0;
			suite.split_result.pending  = 0;
			suite.split_count++;
		},

		end_split:    || {
			suite.in_split = false;
			suite.total_result.passed  += suite.split_result.passed;
			suite.total_result.failed  += suite.split_result.failed;
			suite.total_result.pending += suite.split_result.pending;
			suite.split_result
		},

		split_count:  || { suite.split_count },

		// group
		group_result: || { suite.group_result },

		// total result
		reset:        || {
			suite.total_result.passed  = 0;
			suite.total_result.failed  = 0;
			suite.total_result.pending = 0;
			suite.group_result.passed  = 0;
			suite.group_result.failed  = 0;
			suite.group_result.pending = 0;
			suite.split_result.passed  = 0;
			suite.split_result.failed  = 0;
			suite.split_result.pending = 0;
			suite.split_count          = 0;
			suite.in_split             = false;
		},

		total_result: || {
			suite.total_result.passed  += suite.group_result.passed;
			suite.total_result.failed  += suite.group_result.failed;
			suite.total_result.pending += suite.group_result.pending;
			suite.total_result
		},

		exit_status:  || { suite.exit_status }
	}
}
