// ====================================================================================================================
// check result
struct BadhronCheckResult {
	passed:  i32,
	failed:  i32,
	pending: i32
}

fn badhron_new_check_result() -> BadhronCheckResult {
	BadhronCheckResult {
		passed:  0,
		failed:  0,
		pending: 0
	}
}


// ====================================================================================================================
// suite result
struct BadhronSuiteResult {
	total_result: BadhronCheckResult,
	split_result: BadhronCheckResult,
	split_count:  i32,
	exit_status:  i32
}

fn badhron_new_suite_result() -> BadhronSuiteResult {
	BadhronSuiteResult{
		total_result: badhron_new_check_result(),
		split_result: badhron_new_check_result(),
		split_count:  0,
		exit_status:  0
	}
}


// ====================================================================================================================
// result handler
struct BadhronResultHandler {
	passed:       fn() -> (),
	failed:       fn() -> (),
	pending :     fn() -> (),
	split:        fn() -> (),
	reset:        fn() -> (),
	total:        fn() -> BadhronCheckResult,
	split_result: fn() -> BadhronCheckResult,
	split_count:  fn() -> i32,
	exit_status:  fn() -> i32
}

fn badhron_new_result_handler() -> BadhronResultHandler {
	let mut suite = badhron_new_suite_result();
	BadhronResultHandler {
		passed:       || { suite.split_result.passed++; },
		failed:       || { suite.split_result.failed++; suite.exit_status = 1; },
		pending:      || { suite.split_result.pending++; },

		split:        || {
			suite.total_result.passed  += suite.split_result.passed;
			suite.total_result.failed  += suite.split_result.failed;
			suite.total_result.pending += suite.split_result.pending;
			suite.split_result.passed   = 0;
			suite.split_result.failed   = 0;
			suite.split_result.pending  = 0;
			suite.split_count++;
		},

		reset:        || {
			suite.split_result.passed  = 0;
			suite.split_result.failed  = 0;
			suite.split_result.pending = 0;
			suite.total_result.passed  = 0;
			suite.total_result.failed  = 0;
			suite.total_result.pending = 0;
			suite.split_count          = 0;
		},

		total:        || {
			suite.total_result.passed  += suite.split_result.passed;
			suite.total_result.failed  += suite.split_result.failed;
			suite.total_result.pending += suite.split_result.pending;
			suite.total_result
		},

		split_result: || { suite.split_result },
		split_count:  || { suite.split_count },
		exit_status:  || { suite.exit_status }
	}
}
