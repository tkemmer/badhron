struct BadhronReportHandler {
	add_bool_report:  fn(&[u8], bool, bool) -> (),
	add_int_report:   fn(&[u8], i64,  i64)  -> (),
	add_uint_report:  fn(&[u8], u64,  u64)  -> (),
	add_float_report: fn(&[u8], f64,  f64)  -> ()
}

fn badhron_new_report_handler(res: BadhronResultHandler, name: &[u8]) -> BadhronReportHandler {
	BadhronReportHandler {
		add_bool_report:  |message, exp, obs| {
			badhron_add_bool_report(res.suite_id(), name, res.split_name(), message, exp, obs)
		},

		add_int_report:   |message, exp, obs| {
			badhron_add_int_report(res.suite_id(), name, res.split_name(), message, exp, obs)
		},

		add_uint_report:  |message, exp, obs| {
			badhron_add_uint_report(res.suite_id(), name, res.split_name(), message, exp, obs)
		},

		add_float_report: |message, exp, obs| {
			badhron_add_float_report(res.suite_id(), name, res.split_name(), message, exp, obs)
		}
	}
}

extern "C" {
	fn badhron_add_bool_report( res: u64, function: &[u8], subgroup: &[u8], message: &[u8], exp: bool, obs: bool) -> ();
	fn badhron_add_int_report(  res: u64, function: &[u8], subgroup: &[u8], message: &[u8], exp: i64,  obs: i64)  -> ();
	fn badhron_add_uint_report( res: u64, function: &[u8], subgroup: &[u8], message: &[u8], exp: u64,  obs: u64)  -> ();
	fn badhron_add_float_report(res: u64, function: &[u8], subgroup: &[u8], message: &[u8], exp: f64,  obs: f64)  -> ();
}
