// ====================================================================================================================
// misc
fn pending(name: &[u8]) -> () {
	rstack.pending();
}


// ====================================================================================================================
// bool
fn assert_bool(exp: bool, body: fn() -> bool) -> () {
	if exp == body() {
		rstack.passed();
	} else {
		rstack.failed();
	}
}

fn assert_true(body: fn() -> bool) -> () {
	assert_bool(true, body);
}

fn assert_false(body: fn() -> bool) -> () {
	assert_bool(false, body);
}


// ====================================================================================================================
// signed integers
fn assert_i64(exp: i64, body: fn() -> i64) -> () {
	if exp == body() {
		rstack.passed();
	} else {
		rstack.failed();
	}
}

fn assert_i32(exp: i32, body: fn() -> i32) -> () {
	assert_i64(exp as i64, || body() as i64);
}

fn assert_i16(exp: i16, body: fn() -> i16) -> () {
	assert_i64(exp as i64, || body() as i64);
}

fn assert_i8(exp: i8, body: fn() -> i8) -> () {
	assert_i64(exp as i64, || body() as i64);
}


// ====================================================================================================================
// unsigned integers
fn assert_u64(exp: u64, body: fn() -> u64) -> () {
	if exp == body() {
		rstack.passed();
	} else {
		rstack.failed();
	}
}

fn assert_u32(exp: u32, body: fn() -> u32) -> () {
	assert_u64(exp as u64, || body() as u64);
}

fn assert_u16(exp: u16, body: fn() -> u16) -> () {
	assert_u64(exp as u64, || body() as u64);
}

fn assert_u8(exp: u8, body: fn() -> u8) -> () {
	assert_u64(exp as u64, || body() as u64);
}


// ====================================================================================================================
// floating point numbers
static rtol_f64 = 1.49e-8;
static rtol_f32 = 3.45e-5f;
static rtol_f16 = 0.03125h;

fn assert_f64(exp: f64, body: fn() -> f64) -> () {
	let obs = body();
	if math.fabs(exp - obs) <= rtol_f64 * math.fmax(math.fabs(exp), math.fabs(obs)) {
		rstack.passed();
	} else {
		rstack.failed();
	}
}

fn assert_f32(exp: f32, body: fn() -> f32) -> () {
	let obs = body();
	if math.fabsf(exp - obs) <= rtol_f32 * math.fmaxf(math.fabsf(exp), math.fabsf(obs)) {
		rstack.passed();
	} else {
		rstack.failed();
	}
}
