// ====================================================================================================================
// misc
fn badhron_pending(res: ResultStack, name: &[u8]) -> () {
	res.pending();
}


// ====================================================================================================================
// bool
fn badhron_assert_bool(res: ResultStack, exp: bool, body: fn() -> bool) -> () {
	if exp == body() {
		res.passed();
	} else {
		res.failed();
	}
}

fn badhron_assert_true(res: ResultStack, body: fn() -> bool) -> () {
	badhron_assert_bool(res, true, body);
}

fn badhron_assert_false(res: ResultStack, body: fn() -> bool) -> () {
	badhron_assert_bool(res, false, body);
}


// ====================================================================================================================
// signed integers
fn badhron_assert_i64(res: ResultStack, exp: i64, body: fn() -> i64) -> () {
	if exp == body() {
		res.passed();
	} else {
		res.failed();
	}
}

fn badhron_assert_i32(res: ResultStack, exp: i32, body: fn() -> i32) -> () {
	badhron_assert_i64(res, exp as i64, || body() as i64);
}

fn badhron_assert_i16(res: ResultStack, exp: i16, body: fn() -> i16) -> () {
	badhron_assert_i64(res, exp as i64, || body() as i64);
}

fn badhron_assert_i8(res: ResultStack, exp: i8, body: fn() -> i8) -> () {
	badhron_assert_i64(res, exp as i64, || body() as i64);
}


// ====================================================================================================================
// unsigned integers
fn badhron_assert_u64(res: ResultStack, exp: u64, body: fn() -> u64) -> () {
	if exp == body() {
		res.passed();
	} else {
		res.failed();
	}
}

fn badhron_assert_u32(res: ResultStack, exp: u32, body: fn() -> u32) -> () {
	badhron_assert_u64(res, exp as u64, || body() as u64);
}

fn badhron_assert_u16(res: ResultStack, exp: u16, body: fn() -> u16) -> () {
	badhron_assert_u64(res, exp as u64, || body() as u64);
}

fn badhron_assert_u8(res: ResultStack, exp: u8, body: fn() -> u8) -> () {
	badhron_assert_u64(res, exp as u64, || body() as u64);
}


// ====================================================================================================================
// floating point numbers
// static rtol_f16 = 0.03125h;

fn badhron_assert_f64(res: ResultStack, exp: f64, body: fn() -> f64) -> () {
	let math = cpu_intrinsics;
	let rtol = 1.49e-8;
	let obs = body();
	if math.fabs(exp - obs) <= rtol * math.fmax(math.fabs(exp), math.fabs(obs)) {
		res.passed();
	} else {
		res.failed();
	}
}

fn badhron_assert_f32(res: ResultStack, exp: f32, body: fn() -> f32) -> () {
	let math = cpu_intrinsics;
	let rtol = 3.45e-5f;
	let obs = body();
	if math.fabsf(exp - obs) <= rtol * math.fmaxf(math.fabsf(exp), math.fabsf(obs)) {
		res.passed();
	} else {
		res.failed();
	}
}
